---
  - debug:
      msg: "app_repo_url = {{ app_repo_url }}"
  - debug:
      msg: "app_folder = {{ app_folder }}"
  - name: Check if application secrets URL file exists
    stat:
      path: /home/ansible_user/.app/app-secrets-url.txt
    register: app_secrets_url_file
  - name: Application secrets URL file existence
    debug:
      msg: "app_secrets_url_file.stat.exists = {{app_secrets_url_file}}"
  - name: Download application secrets file
    command: "scp {{remote_url}} /home/ansible_user/.app/app-secrets.yaml"
    vars:
      remote_url: "{{ lookup('file', '/home/ansible_user/.app/app-secrets-url.txt') }}"
    when: app_secrets_url_file.stat.exists
    no_log: True
  - name: Pull latest from application repo
    git:
      repo: "{{ app_repo_url }}"
      dest: /home/ansible_user/code/app
      clone: yes
      update: yes
      force: yes
      accept_hostkey: yes
  - name: Install application dependencies
    shell: npm install
    args:
      chdir:  "/home/ansible_user/code/app/{{app_folder}}"
  - set_fact:
      newAppVersion: "{{ (lookup('file', '/home/ansible_user/code/app/' + app_folder + '/package.json') | from_json).get('version') }}"
  - set_fact:
      existingAppVersion: ""
  - debug:
      msg: "Version of app pulled down = {{ newAppVersion }}"
  - name: Get info on running app
    command: "pm2 jlist"
    register: pm2_proc_list
  - debug:
      msg: "pm2_proc_list = {{ (pm2_proc_list.stdout | from_json) }}"
  - set_fact:
      existingAppVersion: "{{ item.pm2_env.version | default('') }}"
    when: item.name == "app"
    with_items: "{{ pm2_proc_list.stdout | from_json }}"
  - debug:
      msg: "Version of app running = {{ existingAppVersion }}"
  - name: Start application
    command: "pm2 start /home/ansible_user/code/app/{{app_folder}}/src/app.js"
    register: ret
    when: existingAppVersion|length == 0
  - name: Restart application
    command: "pm2 restart app"
    when: existingAppVersion|length != 0 and existingAppVersion != newAppVersion
